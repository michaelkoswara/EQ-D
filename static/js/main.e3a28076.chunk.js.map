{"version":3,"sources":["providers/EqDataProvider.tsx","utils/messages.ts","components/Layout/Layout.tsx","components/ErrorBox/ErrorBox.tsx","components/CustomTable/CustomTable.tsx","components/Spinner/Spinner.tsx","components/CustomButton/CustomButton.tsx","components/StatBox/StatBox.tsx","components/Chart/BarChart.tsx","utils/findMaxMinArray.ts","pages/Home.tsx","utils/findAverageInArray.ts","utils/columnData.tsx","pages/List.tsx","App.tsx","index.tsx"],"names":["EQDataContext","createContext","eqList","refreshList","isLoading","hasNetworkError","lastRefreshed","Date","EqDataProvider","children","useState","setEqList","setIsLoading","setHasNetworkError","lastRetrievedDate","setLastRetrievedDate","useEffect","refreshData","a","fetchEQDataFromApi","listFromApi","mappedList","map","properties","dateOccured","time","magnitude","Number","mag","toFixed","moreDetailURL","url","location","place","fetch","response","ok","json","features","Error","Provider","value","messages","networkError","appTitle","statTotal","statMax","statMin","statAvg","loading","clickToRefresh","listPageHeader","listPageBody","homepageHeader","homepageGraphTitle","homepageBody","Header","AntLayout","Content","Footer","Layout","useLocation","className","style","float","color","fontSize","padding","theme","mode","selectedKeys","pathname","Item","to","textAlign","getFullYear","ErrorBox","message","showIcon","showRetryButton","onRetryClick","description","type","onClick","marginTop","CustomTable","list","columns","dataSource","Spinner","size","tip","CustomButton","text","StatBox","title","numberPrecision","precision","BarChart","height","xField","yField","props","data","point","shape","findMaxMinArray","max","length","Math","min","Title","Typography","Paragraph","Home","useContext","buildChartData","numOfOccurrence","filter","val","floor","gutter","justify","xs","md","xl","i","reduce","b","toLocaleString","level","renderStats","sm","eqTableColumns","render","record","Fragment","target","rel","href","responsive","dataIndex","key","defaultSortOrder","sorter","List","eq","App","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e3a28076.chunk.js","sourcesContent":["import React, {useState, createContext, useEffect} from \"react\";\n\nconst USGS_API_URL = `https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson`;\n\nexport interface IEarthquakeData {\n    dateOccured:Date;\n    magnitude:number;\n    moreDetailURL:string;\n    location:string;\n};\n\nexport interface IEQDataFromApi {\n    properties: IEQPropertyFromApi;\n};\n\nexport interface IEQPropertyFromApi {\n    mag:number;\n    place:string;\n    time:number;\n    url:string;\n}\n\n// Data context for the EQ data that any child component can utilize.\nexport const EQDataContext = createContext({\n    eqList: [] as IEarthquakeData[],\n    refreshList: ()=>{},\n    isLoading: false,\n    hasNetworkError:false,\n    lastRefreshed: new Date()\n});\n\nconst EqDataProvider:React.FC = ({children}):JSX.Element => {\n    const [eqList, setEqList] = useState<Array<IEarthquakeData>>([]);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasNetworkError, setHasNetworkError] = useState<boolean>(false);\n    const [lastRetrievedDate, setLastRetrievedDate] = useState<Date>(new Date());\n\n    // On app mount, call the API to load the eq data.\n    useEffect(() => {\n        refreshData();\n    },[]);\n    \n    const refreshData = async () => {\n        try {\n            setIsLoading(true);\n            setHasNetworkError(false);\n            const listFromApi = await fetchEQDataFromApi();\n            const mappedList:IEarthquakeData[] = listFromApi.map(({properties}) => ({\n                dateOccured: new Date(properties.time),\n                magnitude: Number(properties.mag.toFixed(2)),\n                moreDetailURL: properties.url,\n                location: properties.place\n            }));\n            setEqList(mappedList);\n            setLastRetrievedDate(new Date());\n        } catch(e) {\n            setHasNetworkError(true);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    // This function simply initiates the http GET call to retrieve the list of EQ data.\n    // Putting the resulting list into the context data, and setting other flags will be up to the caller.\n    const fetchEQDataFromApi = async () => {\n        const response = await fetch(USGS_API_URL);\n        if (response.ok) {\n            const {features}:{features:Array<IEQDataFromApi>} = await response.json();\n            return features;\n        } else {\n            throw new Error('network error');\n        }\n    };\n\n    return (\n        <EQDataContext.Provider value={{\n            eqList,\n            refreshList: refreshData,\n            isLoading,\n            hasNetworkError,\n            lastRefreshed:lastRetrievedDate\n        }}>\n            {children}\n        </EQDataContext.Provider>\n    );\n};\n\nexport default EqDataProvider;\n","const messages = {\n    networkError:\"Unfortunately a network error was encountered. Either the USGS API is down, or there is a problem with your internet connection. Please try again to refresh using the 'Refresh' button or try later. Thank you !\",\n    appTitle: \"EQ-D\",\n    statTotal: \"Total Earthquakes in the Past Day (rolling basis)\",\n    statMax: \"Highest Magnitude Reported\",\n    statMin: \"Lowest Magnitude Reported\",\n    statAvg: \"Average Magnitude of Earthquakes (past day)\",\n    loading: \"Loading...\",\n    clickToRefresh:\"Click to Refresh Data\",\n    listPageHeader: \"Tabulated Data of All Earthquakes (Past 24 hours)\",\n    listPageBody: \"This table list the important information from the USGS 'Past Day' API of reported earthquakes around the world. To sort by magnitude, simply click on the 'Magnitude' column header to toggle through the desired sort order (including to reset with no sorting).\",\n    homepageHeader: \"Synopsis\",\n    homepageGraphTitle: \"Number of Earthquakes occurrences per magnitude (rounded down to nearest number)\",\n    homepageBody: \"This web application pulls in data from the public API of USGS (United States Geological Survey). The USGS updates their data fairly frequently, so all that is needed to refresh the data is click the blue refresh button or refresh the page the traditional way.\"\n};\n\nexport default messages;","import React from 'react';\nimport { Layout as AntLayout, Menu } from 'antd';\nimport { Link, useLocation } from 'react-router-dom';\nimport Title from 'antd/lib/typography/Title';\nimport messages from '../../utils/messages';\n\n\nconst { Header, Content, Footer } = AntLayout;\n\nconst Layout:React.FC = ({children}) => {\n    const location = useLocation();\n    \n    return (\n        <AntLayout className=\"layout\">\n            <Header data-testid=\"header\">\n                <Title style={{float:\"left\",color:\"white\",fontSize:\"1.5rem\",padding:\"1rem 2rem 0 0\"}}>{messages.appTitle}</Title>\n                <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[location.pathname]}>\n                    <Menu.Item key=\"/EQ-D\">\n                        <Link to=\"/EQ-D\">{`Home`}</Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"/EQ-D/list\">\n                        <Link to=\"/EQ-D/list\">{`List`}</Link>\n                    </Menu.Item>\n                </Menu>\n            </Header>\n            <Content style={{ padding: '2rem 50px' }}>\n                {children}\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Michael Koswara ©{new Date().getFullYear()}</Footer>\n      </AntLayout>\n    );\n};\n\nexport default Layout;","import { Alert, Button } from \"antd\";\n\nexport interface IErrorBox {\n    message:string;\n    showIcon?:boolean;\n    showRetryButton?:boolean;\n    onRetryClick?:()=>void;\n}\n\nconst ErrorBox = ({message, showIcon, showRetryButton, onRetryClick}:IErrorBox) => {\n    return ( \n        <>\n            <Alert\n                message=\"Error\"\n                description={message}\n                type=\"error\"\n                showIcon={showIcon}\n                data-testid=\"error-box\"\n            />\n            {\n                showRetryButton && onRetryClick &&\n                <div>                    \n                    <Button type=\"primary\" onClick={onRetryClick} style={{marginTop:\"1rem\"}} data-testid=\"retry-button\">\n                        Refresh\n                    </Button>\n                </div>\n            }       \n        </>\n    );\n};\n\nexport default ErrorBox;","import { Table } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\n\nexport interface ICustomTable {\n    columns?: ColumnsType<any>;\n    list?: Array<any>;\n    className?:string;\n}\n\nconst CustomTable = ({list, columns, className}:ICustomTable) => {\n    return <Table dataSource={list} columns={columns} className={className} data-testid=\"custom-table\" />\n};\n\nexport default CustomTable;","import { Spin } from \"antd\";\nimport messages from \"../../utils/messages\";\n\nconst Spinner = () => {\n    return <Spin size=\"large\" tip={messages.loading} data-testid=\"custom-spinner\" />;\n};\n\nexport default Spinner;","import { Button } from \"antd\";\n\nexport interface ICustomButton {\n    onClick:()=>void;\n    type: \"link\" | \"text\" | \"ghost\" | \"primary\" | \"default\" | \"dashed\" | undefined;\n    text:string;\n    className?:string;\n};\n\nconst CustomButton = ({onClick, type, text, className}:ICustomButton) => {\n    return (\n        <Button type={type || \"default\"} onClick={onClick} className={className} data-testid=\"custom-button\">\n            {text}\n        </Button>\n    );\n};\n\nexport default CustomButton;","import { Statistic } from \"antd\";\nimport \"./statbox.scss\";\n\n\nexport interface IStatBox {\n    numberPrecision?:number;\n    type?: \"danger\" | \"good\" | \"neutral\" | \"informational\";\n    value:number;\n    title:string;\n};\n\nconst StatBox = ({title, numberPrecision, type = \"neutral\", value}:IStatBox) => {\n    return <Statistic title={title} precision={numberPrecision} className={type} value={value} data-testid=\"statbox\"/>;\n};\n\nexport default StatBox;","import { Column } from '@ant-design/charts';\n\nexport interface IBarChart {\n    height?:number;\n    xField:string;\n    yField:string;\n    data:any[];\n};\n\nconst BarChart = ({height=400, xField, yField, data}:IBarChart) => {\n\n  const props = {\n    data,\n    height: height,\n    xField: xField,\n    yField: yField,\n    point: {\n      size: 5,\n      shape: 'diamond',\n    },\n  };\n\n  return <Column {...props} />;\n};\n\nexport default BarChart;","// Finds either the maximum or minimum value in a numerical array. \n// Defaults to finding the max value. To find the minimum value, the 2nd parameter should be set to false\nexport const findMaxMinArray = (list:Array<number>, max:boolean = true):number => {\n    if (!list || list.length < 1) {\n        return 0;\n    }\n\n    return max ? Math.max(...list) : Math.min(...list);\n}\n\n","import React, { useContext } from 'react';\nimport { EQDataContext } from '../providers/EqDataProvider';\nimport { Row, Col, Card, Typography } from 'antd';\nimport {BarChart, CustomButton, ErrorBox, Spinner, StatBox} from '../components/';\nimport messages from '../utils/messages';\nimport { findMaxMinArray } from '../utils/findMaxMinArray';\nimport { findAverageInArray } from '../utils/findAverageInArray';\nconst { Title, Paragraph } = Typography;\n\n\n\nconst Home:React.FC = ():JSX.Element => {\n    const {eqList, refreshList, isLoading, hasNetworkError, lastRefreshed} = useContext(EQDataContext);\n    \n    const renderStats = () => {\n        \n        return (\n            <>\n                <Col xs={24} md={12} xl={6} className=\"mb-2\">\n                    <Card>\n                        <StatBox title={messages.statTotal} value={eqList.length} />\n                    </Card>\n                </Col>\n                <Col xs={24} md={12} xl={4} className=\"mb-2\">\n                    <Card>\n                        <StatBox title={messages.statMax} numberPrecision={2} type=\"danger\" value={findMaxMinArray(eqList.map(i => i.magnitude))} />\n                    </Card>\n                </Col>\n                <Col xs={24} md={12} xl={4} className=\"mb-2\">\n                    <Card>\n                        <StatBox title={messages.statMin} numberPrecision={2} type=\"good\" value={findMaxMinArray(eqList.map(i => i.magnitude),false)} />\n                    </Card>\n                </Col>\n                <Col xs={24} md={12} xl={5} className=\"mb-2\">\n                    <Card>\n                        <StatBox title={messages.statAvg} numberPrecision={2} type=\"informational\" value={findAverageInArray(eqList.map(i => i.magnitude))} />\n                    </Card>\n                </Col>\n                <Col xs={24} className=\"mb-2\">\n                    <Row>\n                        <Col xs={24}><CustomButton type=\"primary\" onClick={refreshList} text={messages.clickToRefresh}/></Col>\n                        <Col xs={24}><Paragraph className=\"mt-1\">last refreshed on {lastRefreshed.toLocaleString(\"DE\")}</Paragraph></Col>\n                    </Row>\n                </Col>\n                <Col xs={24}>\n                    <Typography>\n                        <Title level={3}>{messages.homepageGraphTitle}</Title>\n                    </Typography>\n                    <BarChart xField=\"mag\" yField=\"numOfOccurrence\" data={buildChartData()}/>\n                </Col>\n            </>\n        )\n    };\n\n    const buildChartData = () => {\n        return [\n            {mag:'0', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 0).length},\n            {mag:'1', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 1).length},\n            {mag:'2', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 2).length},\n            {mag:'3', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 3).length},\n            {mag:'4', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 4).length},\n            {mag:'5', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 5).length},\n            {mag:'6', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 6).length},\n            {mag:'7', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 7).length},\n            {mag:'8', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 8).length},\n            {mag:'9', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 9).length},\n            {mag:'10', numOfOccurrence: eqList.filter(val => Math.floor(val.magnitude) === 10).length},\n        ]\n    }\n\n    const renderAlert = () => {\n        return ( \n            <Col sm={24}>\n                <ErrorBox\n                    message={messages.networkError}\n                    showIcon\n                    showRetryButton\n                    onRetryClick={refreshList}\n                />\n            </Col>\n        );\n    };\n\n    return (\n        <>\n            <Row>\n                <Typography>\n                    <Title>{messages.homepageHeader}</Title>\n                    <Paragraph>\n                        {messages.homepageBody}\n                    </Paragraph>\n                </Typography>\n            </Row>\n            <Row gutter={24} justify={isLoading ? \"center\" : \"start\"}>\n                {isLoading && <Col><Spinner/></Col>}\n                {!isLoading && !hasNetworkError && renderStats()}\n                {hasNetworkError && renderAlert()}\n            </Row>\n        </>\n    );\n}\n\nexport default Home;","export const findAverageInArray = (list:Array<number>) => {\n    return list && list.length ? list.reduce((a, b) => (a + b),0) / list.length : 0;\n}\n","import { Breakpoint } from \"antd/lib/_util/responsiveObserve\";\nimport React from \"react\";\nimport { IEarthquakeData } from \"../providers/EqDataProvider\";\nimport { SortOrder } from \"antd/lib/table/interface\";\n\nconst eqTableColumns = [\n    {\n        title: 'Location / Magnitude / URL',\n        render: (record:IEarthquakeData) => (\n            <React.Fragment>\n              <b>Location</b>: {record.location}\n              <br />\n              <b>Magnitude</b>: {record.magnitude}\n              <br/>\n              <b>Date Occurred</b>: {record.dateOccured.toLocaleString()}\n              <br/>\n              <a target=\"_blank\" rel=\"noreferrer\" href={record.moreDetailURL}>Click here for more details</a>\n            </React.Fragment>\n        ),\n        responsive: ['xs'] as Breakpoint[]\n        \n    },\n    {\n        title: 'Location',\n        dataIndex: 'location',\n        key: 'location',\n        responsive: ['sm'] as Breakpoint[]\n    },\n    {\n        title: 'Magnitude',\n        dataIndex: 'magnitude',\n        key: 'magnitude',\n        defaultSortOrder: \"descend\" as SortOrder,\n        sorter: (a:IEarthquakeData,b:IEarthquakeData) => a.magnitude - b.magnitude,\n        responsive: ['sm'] as Breakpoint[]\n    },\n    {\n        title: 'URL',\n        dataIndex: 'moreDetailURL',\n        key: 'moreDetailURL',\n        render: (url:string) => (\n            <React.Fragment>\n              <a target=\"_blank\" key=\"moreDetailURL\" rel=\"noreferrer\" href={url}>Click here for more details</a>\n            </React.Fragment>\n        ),\n        responsive: ['sm'] as Breakpoint[]\n    },\n    {\n        title: 'Date Occurred (Central EU Time)',\n        dataIndex: 'dateOccured',\n        key: 'dateOccured',\n        render: (record:Date) => (\n            <React.Fragment>\n              {record.toLocaleString()}\n            </React.Fragment>\n        ),\n        responsive: ['sm'] as Breakpoint[]\n    },\n    \n];\n\nexport { eqTableColumns };","import React, { useContext } from 'react';\nimport { EQDataContext } from '../providers/EqDataProvider';\nimport { Row, Col, Typography  } from 'antd';\nimport {eqTableColumns} from '../utils/columnData';\nimport { CustomButton, CustomTable, ErrorBox, Spinner } from '../components';\nimport messages from '../utils/messages';\nconst { Paragraph, Title} = Typography;\n\n\n\nconst List:React.FC = ():JSX.Element => {\n    const {eqList, refreshList, isLoading, hasNetworkError, lastRefreshed} = useContext(EQDataContext);\n\n    const renderTableView = () => (\n        <>\n            <Col sm={24}>\n                <div>\n                    Total: {eqList.length}\n                </div>\n                <div>\n                    <CustomButton type=\"primary\" onClick={refreshList} text={messages.clickToRefresh} className=\"mt-1 mb-1\"/>\n                    <Paragraph className=\"mt-1\">last refreshed on {lastRefreshed.toLocaleString(\"DE\")}</Paragraph>\n\n                </div>\n            </Col>\n            <Col sm={24}>\n                <CustomTable list={eqList.map((eq,i) => ({...eq, key:i}))} columns={eqTableColumns} />\n            </Col>\n        </>\n    );\n\n    const renderAlert = () => {\n        return ( \n            <Col sm={24}>\n                <ErrorBox\n                    message={messages.networkError}\n                    showIcon\n                    showRetryButton\n                    onRetryClick={refreshList}\n                />\n            </Col>\n        );\n    };\n\n    return (\n        <>\n            <Row>\n                <Typography>\n                    <Title>{messages.listPageHeader}</Title>\n                    <Paragraph>\n                        {messages.listPageBody}\n                    </Paragraph>\n                </Typography>\n            </Row>\n            <Row gutter={16} justify={isLoading ? \"center\" : \"start\"}>\n                {isLoading && <Col><Spinner/></Col>}\n                {!isLoading && !hasNetworkError && renderTableView()}\n                {hasNetworkError && renderAlert()}\n            </Row>\n        </>\n    );\n}\n\nexport default List;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Home, List } from './pages';\nimport { EqDataProvider } from './providers';\nimport './App.scss';\nimport { Layout } from './components';\n\nconst App:React.FC = () => {\n  return (\n    <EqDataProvider>\n      <Router>\n        <Layout>\n          <Switch>\n            <Route path=\"/EQ-D/list\" component={List}/>\n            <Route path=\"/EQ-D\" component={Home}/>\n          </Switch>\n        </Layout>\n      </Router> \n    </EqDataProvider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}