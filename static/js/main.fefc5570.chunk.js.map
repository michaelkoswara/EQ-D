{"version":3,"sources":["providers/EqDataProvider.tsx","utils/messages.ts","components/Layout/Layout.tsx","components/ErrorBox/ErrorBox.tsx","components/CustomTable/CustomTable.tsx","components/Spinner/Spinner.tsx","components/CustomButton/CustomButton.tsx","components/StatBox/StatBox.tsx","components/Chart/BarChart.tsx","utils/findMaxMinArray.ts","utils/buildEqChartData.ts","pages/Home.tsx","utils/findAverageInArray.ts","utils/columnData.tsx","pages/List.tsx","App.tsx","index.tsx"],"names":["EQDataContext","createContext","eqList","refreshList","isLoading","hasNetworkError","lastRefreshed","Date","EqDataProvider","children","useState","setEqList","setIsLoading","setHasNetworkError","lastRetrievedDate","setLastRetrievedDate","useEffect","refreshData","a","fetchEQDataFromApi","listFromApi","mappedList","map","properties","dateOccured","time","magnitude","Number","mag","toFixed","moreDetailURL","url","location","place","fetch","response","ok","json","features","Error","Provider","value","messages","networkError","appTitle","statTotal","statMax","statMin","statAvg","loading","clickToRefresh","listPageHeader","listPageBody","homepageHeader","homepageGraphTitle","homeGraphX","homeGraphY","homepageBody","Header","AntLayout","Content","Footer","Layout","useLocation","className","style","float","color","fontSize","padding","theme","mode","selectedKeys","pathname","Item","exact","to","textAlign","getFullYear","ErrorBox","message","showIcon","showRetryButton","onRetryClick","description","type","onClick","marginTop","CustomTable","list","columns","dataSource","Spinner","size","tip","CustomButton","text","StatBox","title","numberPrecision","precision","BarChart","height","xField","yField","props","data","point","shape","findMaxMinArray","max","length","Math","min","buildEqChartData","numOfOccurrence","filter","val","floor","Title","Typography","Paragraph","Home","useContext","gutter","justify","xs","md","xl","i","reduce","b","toLocaleString","level","renderStats","sm","eqTableColumns","render","record","Fragment","target","rel","href","responsive","dataIndex","key","defaultSortOrder","sorter","List","eq","App","path","component","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.fefc5570.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\n\nconst USGS_API_URL = `https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson`;\n\nexport interface IEarthquakeData {\n  dateOccured: Date;\n  magnitude: number;\n  moreDetailURL: string;\n  location: string;\n}\n\nexport interface IEQDataFromApi {\n  properties: IEQPropertyFromApi;\n}\n\nexport interface IEQPropertyFromApi {\n  mag: number;\n  place: string;\n  time: number;\n  url: string;\n}\n\n// Data context for the EQ data that any child component can utilize.\nexport const EQDataContext = createContext({\n  eqList: [] as IEarthquakeData[],\n  refreshList: () => {\n    return;\n  },\n  isLoading: false,\n  hasNetworkError: false,\n  lastRefreshed: new Date(),\n});\n\nconst EqDataProvider: React.FC = ({ children }): JSX.Element => {\n  const [eqList, setEqList] = useState<Array<IEarthquakeData>>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [hasNetworkError, setHasNetworkError] = useState<boolean>(false);\n  const [lastRetrievedDate, setLastRetrievedDate] = useState<Date>(new Date());\n\n  // On app mount, call the API to load the eq data.\n  useEffect(() => {\n    refreshData();\n  }, []);\n\n  const refreshData = async () => {\n    try {\n      setIsLoading(true);\n      setHasNetworkError(false);\n      const listFromApi = await fetchEQDataFromApi();\n      const mappedList: IEarthquakeData[] = listFromApi.map(\n        ({ properties }) => ({\n          dateOccured: new Date(properties.time),\n          magnitude: Number(properties.mag.toFixed(2)),\n          moreDetailURL: properties.url,\n          location: properties.place,\n        })\n      );\n      setEqList(mappedList);\n      setLastRetrievedDate(new Date());\n    } catch (e) {\n      setHasNetworkError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // This function simply initiates the http GET call to retrieve the list of EQ data.\n  // Putting the resulting list into the context data, and setting other flags will be up to the caller.\n  const fetchEQDataFromApi = async () => {\n    const response = await fetch(USGS_API_URL);\n    if (response.ok) {\n      const { features }: { features: Array<IEQDataFromApi> } =\n        await response.json();\n      return features;\n    } else {\n      throw new Error(\"network error\");\n    }\n  };\n\n  return (\n    <EQDataContext.Provider\n      value={{\n        eqList,\n        refreshList: refreshData,\n        isLoading,\n        hasNetworkError,\n        lastRefreshed: lastRetrievedDate,\n      }}\n    >\n      {children}\n    </EQDataContext.Provider>\n  );\n};\n\nexport default EqDataProvider;\n","const messages = {\n  networkError:\n    \"Unfortunately a network error was encountered. Either the USGS API is down, or there is a problem with your internet connection. Please try again to refresh using the 'Refresh' button or try later. Thank you !\",\n  appTitle: \"EQ-D\",\n  statTotal: \"Total Earthquakes in the Past Day (rolling basis)\",\n  statMax: \"Highest Magnitude Reported\",\n  statMin: \"Lowest Magnitude Reported\",\n  statAvg: \"Average Magnitude of Earthquakes (past day)\",\n  loading: \"Loading...\",\n  clickToRefresh: \"Click to Refresh Data\",\n  listPageHeader: \"Tabulated Data of All Earthquakes (Past 24 hours)\",\n  listPageBody:\n    \"This table list the important information from the USGS 'Past Day' API of reported earthquakes around the world. To sort by magnitude, simply click on the 'Magnitude' column header to toggle through the desired sort order (including to reset with no sorting).\",\n  homepageHeader: \"Synopsis\",\n  homepageGraphTitle: \"Number of Earthquakes per magnitude (24 hours)\",\n  homeGraphX: \"x-axis: magnitude\",\n  homeGraphY: \"y-axis: number of earthquakes\",\n  lastRefreshed: \"latest Data fetched on\",\n  homepageBody:\n    \"This web application pulls in data from the public API of USGS (United States Geological Survey). The USGS updates their data fairly frequently, so all that is needed to refresh the data is click the blue refresh button or refresh the page the traditional way.\",\n};\n\nexport default messages;\n","import React from \"react\";\nimport { Layout as AntLayout, Menu } from \"antd\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport Title from \"antd/lib/typography/Title\";\nimport messages from \"../../utils/messages\";\nimport \"./layout.scss\";\n\nconst { Header, Content, Footer } = AntLayout;\n\nconst Layout: React.FC = ({ children }) => {\n  const location = useLocation();\n\n  return (\n    <AntLayout className=\"layout\">\n      <Header data-testid=\"header\">\n        <Title\n          style={{\n            float: \"left\",\n            color: \"white\",\n            fontSize: \"1.5rem\",\n            padding: \"1rem 2rem 0 0\",\n          }}\n        >\n          {messages.appTitle}\n        </Title>\n        <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[location.pathname]}>\n          <Menu.Item key=\"/\">\n            <NavLink exact to=\"/\">{`Home`}</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"/list\">\n            <NavLink exact to=\"/list\">{`List`}</NavLink>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: \"2rem 50px\" }}>{children}</Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        Michael Koswara ©{new Date().getFullYear()}\n      </Footer>\n    </AntLayout>\n  );\n};\n\nexport default Layout;\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nexport interface IErrorBox {\n  message: string;\n  showIcon?: boolean;\n  showRetryButton?: boolean;\n  onRetryClick?: () => void;\n}\n\nconst ErrorBox = ({\n  message,\n  showIcon,\n  showRetryButton,\n  onRetryClick,\n}: IErrorBox): JSX.Element => {\n  return (\n    <>\n      <Alert\n        message=\"Error\"\n        description={message}\n        type=\"error\"\n        showIcon={showIcon}\n        data-testid=\"error-box\"\n      />\n      {showRetryButton && onRetryClick && (\n        <div>\n          <Button\n            type=\"primary\"\n            onClick={onRetryClick}\n            style={{ marginTop: \"1rem\" }}\n            data-testid=\"retry-button\"\n          >\n            Refresh\n          </Button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ErrorBox;\n","import { Table } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport React from \"react\";\n\nexport interface ICustomTable {\n  columns?: ColumnsType<any>;\n  list?: Array<{ [key: string]: number | string | Date }>;\n  className?: string;\n}\n\nconst CustomTable = ({\n  list,\n  columns,\n  className,\n}: ICustomTable): JSX.Element => {\n  return (\n    <Table\n      dataSource={list}\n      columns={columns}\n      className={className}\n      data-testid=\"custom-table\"\n    />\n  );\n};\n\nexport default CustomTable;\n","import { Spin } from \"antd\";\nimport messages from \"../../utils/messages\";\nimport React from \"react\";\n\nconst Spinner = (): JSX.Element => {\n  return (\n    <Spin size=\"large\" tip={messages.loading} data-testid=\"custom-spinner\" />\n  );\n};\n\nexport default Spinner;\n","import { Button } from \"antd\";\nimport React from \"react\";\n\nexport interface ICustomButton {\n  onClick: () => void;\n  type:\n    | \"link\"\n    | \"text\"\n    | \"ghost\"\n    | \"primary\"\n    | \"default\"\n    | \"dashed\"\n    | undefined;\n  text: string;\n  className?: string;\n}\n\nconst CustomButton = ({\n  onClick,\n  type,\n  text,\n  className,\n}: ICustomButton): JSX.Element => {\n  return (\n    <Button\n      type={type || \"default\"}\n      onClick={onClick}\n      className={className}\n      data-testid=\"custom-button\"\n    >\n      {text}\n    </Button>\n  );\n};\n\nexport default CustomButton;\n","import { Statistic } from \"antd\";\nimport \"./statbox.scss\";\nimport React from \"react\";\n\nexport interface IStatBox {\n  numberPrecision?: number;\n  type?: \"danger\" | \"good\" | \"neutral\" | \"informational\";\n  value: number;\n  title: string;\n}\n\nconst StatBox = ({\n  title,\n  numberPrecision,\n  type = \"neutral\",\n  value,\n}: IStatBox): JSX.Element => {\n  return (\n    <Statistic\n      title={title}\n      precision={numberPrecision}\n      className={type}\n      value={value}\n      data-testid=\"statbox\"\n    />\n  );\n};\n\nexport default StatBox;\n","import { Column } from \"@ant-design/charts\";\nimport React from \"react\";\n\nexport interface IBarChart {\n  height?: number;\n  xField: string;\n  yField: string;\n  data: Array<{ [key: string]: number | string }>;\n}\n\nconst BarChart = ({\n  height = 400,\n  xField,\n  yField,\n  data,\n}: IBarChart): JSX.Element => {\n  const props = {\n    data,\n    height: height,\n    xField: xField,\n    yField: yField,\n    point: {\n      size: 5,\n      shape: \"diamond\",\n    },\n  };\n\n  return <Column {...props} data-testid=\"barchart\" />;\n};\n\nexport default BarChart;\n","// Finds either the maximum or minimum value in a numerical array.\n// Defaults to finding the max value. To find the minimum value, the 2nd parameter should be set to false\nexport const findMaxMinArray = (list: Array<number>, max = true): number => {\n  if (!list || list.length < 1) {\n    return 0;\n  }\n\n  return max ? Math.max(...list) : Math.min(...list);\n};\n","import { IEarthquakeData } from \"../providers/EqDataProvider\";\n\nexport const buildEqChartData = (\n  eqList: IEarthquakeData[]\n): Array<{ [key: string]: string | number }> => {\n  return [\n    {\n      mag: \"0\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 0)\n        .length,\n    },\n    {\n      mag: \"1\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 1)\n        .length,\n    },\n    {\n      mag: \"2\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 2)\n        .length,\n    },\n    {\n      mag: \"3\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 3)\n        .length,\n    },\n    {\n      mag: \"4\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 4)\n        .length,\n    },\n    {\n      mag: \"5\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 5)\n        .length,\n    },\n    {\n      mag: \"6\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 6)\n        .length,\n    },\n    {\n      mag: \"7\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 7)\n        .length,\n    },\n    {\n      mag: \"8\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 8)\n        .length,\n    },\n    {\n      mag: \"9\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 9)\n        .length,\n    },\n    {\n      mag: \"10\",\n      numOfOccurrence: eqList.filter((val) => Math.floor(val.magnitude) === 10)\n        .length,\n    },\n  ];\n};\n","import React, { useContext } from \"react\";\nimport { EQDataContext } from \"../providers/EqDataProvider\";\nimport { Row, Col, Card, Typography } from \"antd\";\nimport {\n  BarChart,\n  CustomButton,\n  ErrorBox,\n  Spinner,\n  StatBox,\n} from \"../components/\";\nimport messages from \"../utils/messages\";\nimport { findMaxMinArray } from \"../utils/findMaxMinArray\";\nimport { findAverageInArray } from \"../utils/findAverageInArray\";\nimport { buildEqChartData } from \"../utils/buildEqChartData\";\nconst { Title, Paragraph } = Typography;\n\nconst Home: React.FC = (): JSX.Element => {\n  const { eqList, refreshList, isLoading, hasNetworkError, lastRefreshed } =\n    useContext(EQDataContext);\n\n  const renderStats = () => {\n    return (\n      <>\n        <Col xs={24} md={12} xl={6} className=\"mb-2\">\n          <Card>\n            <StatBox title={messages.statTotal} value={eqList.length} />\n          </Card>\n        </Col>\n        <Col xs={24} md={12} xl={4} className=\"mb-2\">\n          <Card>\n            <StatBox\n              title={messages.statMax}\n              numberPrecision={2}\n              type=\"danger\"\n              value={findMaxMinArray(eqList.map((i) => i.magnitude))}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} md={12} xl={4} className=\"mb-2\">\n          <Card>\n            <StatBox\n              title={messages.statMin}\n              numberPrecision={2}\n              type=\"good\"\n              value={findMaxMinArray(\n                eqList.map((i) => i.magnitude),\n                false\n              )}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} md={12} xl={5} className=\"mb-2\">\n          <Card>\n            <StatBox\n              title={messages.statAvg}\n              numberPrecision={2}\n              type=\"informational\"\n              value={findAverageInArray(eqList.map((i) => i.magnitude))}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} className=\"mb-2\">\n          <Row>\n            <Col xs={24}>\n              <CustomButton\n                type=\"primary\"\n                onClick={refreshList}\n                text={messages.clickToRefresh}\n              />\n            </Col>\n            <Col xs={24}>\n              <Paragraph className=\"mt-1\">\n                {messages.lastRefreshed} {lastRefreshed.toLocaleString(\"DE\")}\n              </Paragraph>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={24}>\n          <Typography>\n            <Title level={3}>{messages.homepageGraphTitle}</Title>\n            <ul className=\"mb-2\">\n              <li>\n                <Paragraph>{messages.homeGraphX}</Paragraph>\n              </li>\n              <li>\n                <Paragraph>{messages.homeGraphY}</Paragraph>\n              </li>\n            </ul>\n          </Typography>\n          <BarChart\n            xField=\"mag\"\n            yField=\"numOfOccurrence\"\n            data={buildEqChartData(eqList)}\n          />\n        </Col>\n      </>\n    );\n  };\n\n  const renderAlert = () => {\n    return (\n      <Col sm={24}>\n        <ErrorBox\n          message={messages.networkError}\n          showIcon\n          showRetryButton\n          onRetryClick={refreshList}\n        />\n      </Col>\n    );\n  };\n\n  return (\n    <>\n      <Row>\n        <Typography>\n          <Title>{messages.homepageHeader}</Title>\n          <Paragraph>{messages.homepageBody}</Paragraph>\n        </Typography>\n      </Row>\n      <Row gutter={24} justify={isLoading ? \"center\" : \"start\"}>\n        {isLoading && (\n          <Col>\n            <Spinner />\n          </Col>\n        )}\n        {!isLoading && !hasNetworkError && renderStats()}\n        {hasNetworkError && renderAlert()}\n      </Row>\n    </>\n  );\n};\n\nexport default Home;\n","export const findAverageInArray = (list: Array<number>): number => {\n  return list && list.length\n    ? list.reduce((a, b) => a + b, 0) / list.length\n    : 0;\n};\n","import { Breakpoint } from \"antd/lib/_util/responsiveObserve\";\nimport React from \"react\";\nimport { IEarthquakeData } from \"../providers/EqDataProvider\";\nimport { SortOrder } from \"antd/lib/table/interface\";\n\nconst eqTableColumns = [\n  {\n    title: \"Location / Magnitude / URL\",\n    render: (record: IEarthquakeData): JSX.Element => (\n      <React.Fragment>\n        <b>Location</b>: {record.location}\n        <br />\n        <b>Magnitude</b>: {record.magnitude}\n        <br />\n        <b>Date Occurred</b>: {record.dateOccured.toLocaleString()}\n        <br />\n        <a target=\"_blank\" rel=\"noreferrer\" href={record.moreDetailURL}>\n          Click here for more details\n        </a>\n      </React.Fragment>\n    ),\n    responsive: [\"xs\"] as Breakpoint[],\n  },\n  {\n    title: \"Location\",\n    dataIndex: \"location\",\n    key: \"location\",\n    responsive: [\"sm\"] as Breakpoint[],\n  },\n  {\n    title: \"Magnitude\",\n    dataIndex: \"magnitude\",\n    key: \"magnitude\",\n    defaultSortOrder: \"descend\" as SortOrder,\n    sorter: (a: IEarthquakeData, b: IEarthquakeData): number =>\n      a.magnitude - b.magnitude,\n    responsive: [\"sm\"] as Breakpoint[],\n  },\n  {\n    title: \"URL\",\n    dataIndex: \"moreDetailURL\",\n    key: \"moreDetailURL\",\n    render: (url: string): JSX.Element => (\n      <React.Fragment>\n        <a target=\"_blank\" key=\"moreDetailURL\" rel=\"noreferrer\" href={url}>\n          Click here for more details\n        </a>\n      </React.Fragment>\n    ),\n    responsive: [\"sm\"] as Breakpoint[],\n  },\n  {\n    title: \"Date Occurred (Central EU Time)\",\n    dataIndex: \"dateOccured\",\n    key: \"dateOccured\",\n    render: (record: Date): JSX.Element => (\n      <React.Fragment>{record.toLocaleString()}</React.Fragment>\n    ),\n    responsive: [\"sm\"] as Breakpoint[],\n  },\n];\n\nexport { eqTableColumns };\n","import React, { useContext } from \"react\";\nimport { EQDataContext } from \"../providers/EqDataProvider\";\nimport { Row, Col, Typography } from \"antd\";\nimport { eqTableColumns } from \"../utils/columnData\";\nimport { CustomButton, CustomTable, ErrorBox, Spinner } from \"../components\";\nimport messages from \"../utils/messages\";\nconst { Paragraph, Title } = Typography;\n\nconst List: React.FC = (): JSX.Element => {\n  const { eqList, refreshList, isLoading, hasNetworkError, lastRefreshed } =\n    useContext(EQDataContext);\n\n  const renderTableView = () => (\n    <>\n      <Col sm={24}>\n        <div>Total: {eqList.length}</div>\n        <div>\n          <CustomButton\n            type=\"primary\"\n            onClick={refreshList}\n            text={messages.clickToRefresh}\n            className=\"mt-1 mb-1\"\n          />\n          <Paragraph className=\"mt-1\">\n            {messages.lastRefreshed} {lastRefreshed.toLocaleString(\"DE\")}\n          </Paragraph>\n        </div>\n      </Col>\n      <Col sm={24}>\n        <CustomTable\n          list={eqList.map((eq, i) => ({ ...eq, key: i }))}\n          columns={eqTableColumns}\n        />\n      </Col>\n    </>\n  );\n\n  const renderAlert = () => {\n    return (\n      <Col sm={24}>\n        <ErrorBox\n          message={messages.networkError}\n          showIcon\n          showRetryButton\n          onRetryClick={refreshList}\n        />\n      </Col>\n    );\n  };\n\n  return (\n    <>\n      <Row>\n        <Typography>\n          <Title>{messages.listPageHeader}</Title>\n          <Paragraph>{messages.listPageBody}</Paragraph>\n        </Typography>\n      </Row>\n      <Row gutter={16} justify={isLoading ? \"center\" : \"start\"}>\n        {isLoading && (\n          <Col>\n            <Spinner />\n          </Col>\n        )}\n        {!isLoading && !hasNetworkError && renderTableView()}\n        {hasNetworkError && renderAlert()}\n      </Row>\n    </>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Home, List } from \"./pages\";\nimport { EqDataProvider } from \"./providers\";\nimport \"./App.scss\";\nimport { Layout } from \"./components\";\n\nconst App: React.FC = () => {\n  return (\n    <EqDataProvider>\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/list\" component={List} />\n        </Switch>\n      </Layout>\n    </EqDataProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport React from \"react\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/EQ-D\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}